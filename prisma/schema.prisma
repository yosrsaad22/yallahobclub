// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CompanyInfo {
  id          String   @id @default(cuid())
  rib         String
  fiscalId    String
  tva         String
  companyName String   @unique @default("ECOMNESS")
  createdAt   DateTime @default(now())

  onlyOneRecord Boolean @unique @default(true)

  @@map("company_info")
}

enum UserRole {
  ADMIN
  SELLER
  SUPPLIER
}

enum UserPack {
  DAMREJ
  AJEJA
  MACHROU3
}

model User {
  id            String         @id @default(cuid())
  fullName      String
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  number        String         @unique
  address       String
  image         String?
  pack          UserPack?
  password      String
  rib           String?
  role          UserRole       @default(SELLER)
  active        Boolean?       @default(false)
  paid          Boolean        @default(false)
  boarded       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  accounts      Account[]
  notifications Notification[]
  products      Product[]

  @@map("users")
}

model Lead {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  number        String   @unique
  videoProgress Float    @default(0)
  enrollNumber  Int      @default(0)
  createdAt     DateTime @default(now())

  @@map("leads")
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("email_verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

enum NotificationType {
  ADMIN_NEW_LEAD
  ADMIN_NEW_SELLER
  ADMIN_NEW_ORDER
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  subject   String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model Chapter {
  id             String @id @default(cuid())
  title_en       String
  description_en String
  title_fr       String
  description_fr String
  video          String
  position       Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@map("chapters")
}

model Course {
  id             String    @id @default(cuid())
  title_en       String
  description_en String
  title_fr       String
  description_fr String
  image          String?
  chapter        Chapter[]

  onlyOneRecord Boolean @unique @default(true)

  @@map("course")
}

enum ProductCategoryType {
  FURNITURE
  DECORATION
  CAR_ACCESSORIES
  HOME_APPLIANCES
  ELECTRONICS
  CLOTHING
  BEAUTY
  SPORTS
  TOYS
  JEWELRY
  GARDEN
  OTHER
}

enum SizeType {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ColorType {
  RED
  BLUE
  GREEN
  YELLOW
  BLACK
  WHITE
  ORANGE
  PURPLE
  PINK
  LIGHT_BLUE
  NAVY_BLUE
  TURQUOISE
  BEIGE
  BROWN
  GRAY
}

model Product {
  id             String              @id @default(cuid())
  name           String
  description    String
  delivery       String
  images         String[]
  wholesalePrice Float
  profitMargin   Float
  featured       Boolean             @default(false)
  category       ProductCategoryType
  stock          Int                 @default(0)
  sizes          SizeType[]
  colors         ColorType[]
  supplier       User?               @relation(fields: [supplierId], references: [id])
  supplierId     String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}
