// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CompanyInfo {
  id          String   @id @default(cuid())
  rib         String
  fiscalId    String
  tva         String
  companyName String   @unique @default("ECOMNESS")
  createdAt   DateTime @default(now())

  onlyOneRecord Boolean @unique @default(true)

  @@map("company_info")
}

enum UserRole {
  ADMIN
  SELLER
  SUPPLIER
}

enum UserPack {
  DAMREJ
  AJEJA
  MACHROU3
}

model User {
  id            String    @id @default(cuid())
  fullName      String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  number        String    @unique
  address       String
  image         String?
  pack          UserPack?
  password      String
  rib           String?
  role          UserRole  @default(SELLER)
  active        Boolean?  @default(false)
  paid          Boolean   @default(false)
  boarded       Boolean   @default(false)
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())

  accounts      Account[]
  notifications Notification[]

  products   Product[] @relation("SuppliedProducts")
  myProducts Product[] @relation("SellingProducts")
  soldOrders Order[]   @relation("SellerOrders")

  @@map("users")
}

model Lead {
  id            String   @id @default(cuid())
  fullName      String
  email         String   @unique
  number        String   @unique
  videoProgress Float    @default(0)
  enrollNumber  Int      @default(0)
  createdAt     DateTime @default(now())

  @@map("leads")
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("email_verification_token")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

enum NotificationType {
  ADMIN_NEW_LEAD
  ADMIN_NEW_SELLER
  ADMIN_NEW_PRODUCT
  SUPPLIER_PRODUCT_PUBLISHED
  SUPPLIER_PRODUCT_UNPUBLISHED
  SUPPLIER_NEW_ORDER
  ADMIN_NEW_ORDER
  SELLER_STOCK_CHANGED
  ORDER_STATUS_CHANGED
  ORDER_CANCELLED
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  subject   String?
  read      Boolean          @default(false)
  link      String?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model Chapter {
  id             String @id @default(cuid())
  title_en       String
  description_en String
  title_fr       String
  description_fr String
  video          String
  position       Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@map("chapters")
}

model Course {
  id             String    @id @default(cuid())
  title_en       String
  description_en String
  title_fr       String
  description_fr String
  image          String?
  chapter        Chapter[]

  onlyOneRecord Boolean @unique @default(true)

  @@map("course")
}

enum ProductCategoryType {
  FURNITURE
  DECORATION
  CAR_ACCESSORIES
  HOME_APPLIANCES
  ELECTRONICS
  CLOTHING
  BEAUTY
  SPORTS
  TOYS
  JEWELRY
  GARDEN
  KITCHEN
  ACCESSORIES
}

enum SizeType {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ColorType {
  RED
  BLUE
  GREEN
  YELLOW
  BLACK
  WHITE
  ORANGE
  PURPLE
  PINK
  LIGHT_BLUE
  NAVY_BLUE
  TURQUOISE
  BEIGE
  BROWN
  GRAY
}

model Media {
  key  String @unique
  type String

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Product {
  id             String              @id @default(cuid())
  name           String
  description    String
  delivery       String
  media          Media[]
  wholesalePrice Float
  profitMargin   Float
  platformProfit Float?              @default(0)
  featured       Boolean             @default(false)
  category       ProductCategoryType
  stock          Int                 @default(0)
  sizes          SizeType[]
  colors         ColorType[]
  orders         OrderProduct[]

  supplier   User?   @relation("SuppliedProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String?
  sellers    User[]  @relation("SellingProducts")

  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id             String     @id @default(cuid())
  quantity       String
  detailPrice    Float
  size           SizeType?
  color          ColorType?
  supplierProfit Float
  product        Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String?
  order          Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String?
}

model Order {
  id             String         @id @default(cuid())
  deliveryId     String?        @unique
  status         String?        @default("record-created")
  total          Float
  sellerProfit   Float
  platformProfit Float
  firstName      String
  lastName       String
  fullName       String?
  email          String?
  number         String
  city           String
  address        String
  products       OrderProduct[]

  seller   User?   @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
