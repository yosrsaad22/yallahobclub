// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                  String   @id @default(cuid())
  fullName            String
  number              String   @unique
  email               String   @unique
  address             String
  image               String?
  password            String
  role                UserRole @default(USER)
  onBoarding          Int      @default(0)
  createdAt           DateTime @default(now())
  firstPartnerName    String?
  secondPartnerName   String?
  yearsKnownEachOther Int?
  yearsMarried        Int?
  numberOfChildren    Int?

  accounts Account[]
  
  categories Category[]  // Added relationship with categories

  @@map("users")
}

// Category model to store card game categories
model Category {
  id          String     @id @default(cuid())
  title       String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[] 

  createdAt   DateTime   @default(now())  // Add createdAt field
  image       String?    // Add image field
  backImage   String?    // Add backImage field
  backColor   String?    // Add backColor field

  @@map("categories")
}


// Question model to store card game questions
model Question {
  id          String     @id @default(cuid())
  question    String
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Linking to Category

  @@map("questions")
}
